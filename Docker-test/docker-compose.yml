services:
  db:
    image: postgres:16.3
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - db:/var/lib/postgresql/data
    networks:
      - proxy
    hostname: db

  pgadmin:
    build: 
      context: ./DB/PgAdmin
      args:
        POSTGRES_USER: ${POSTGRES_USER}
        POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
        POSTGRES_DB: ${POSTGRES_DB}
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    volumes:
      - pgadmin:/pgadmin4
    networks:
      - proxy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.pgadmin.rule=Host(`pgadmin.${DOMAIN}`)"
      - "traefik.http.routers.pgadmin.entrypoints=websecure"
      - "traefik.http.routers.pgadmin.tls=true"
      - "traefik.http.routers.pgadmin.middlewares=redirect-to-https@file" # Note the "@file" to specify it's defined in a file
      - "traefik.http.services.pgadmin.loadbalancer.server.url=http://pgadmin:80"
    hostname: pgadmin
    depends_on:
      - "db"
      
  nats:
    image: nats:2.10
    volumes:
       - ./NATS/config/:/etc/nats
    environment:
      NATS_USER: ${NATS_USER}
      NATS_PASSWORD: ${NATS_PASSWORD}
    command: "-c /etc/nats/nats.conf"
    restart: unless-stopped
    networks:
      - proxy
    ports:
      - "4222:4222"
    hostname: nats

  django_api:
    build:
      context: ../
      dockerfile: ./Docker-test/API/Dockerfile
    environment:
      DJANGO_ENVIRONMENT: ${DJANGO_ENVIRONMENT}
      DJANGO_DB_NAME: ${POSTGRES_DB}
      DJANGO_DB_USER: ${POSTGRES_USER}
      DJANGO_DB_PASSWORD: ${POSTGRES_PASSWORD}
      DJANGO_DB_HOST: db  # This is the hostname in docker-compose
      DJANGO_DB_PORT: 5432
    volumes:
      - ../Django_api/:/app
    restart: unless-stopped
    networks:
      - proxy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.django_api.rule=Host(`api.${DOMAIN}`)"
      - "traefik.http.routers.django_api.entrypoints=websecure"
      - "traefik.http.routers.django_api.tls=true"
      - "traefik.http.routers.django_api.middlewares=redirect-to-https@file" # Note the "@file" to specify it's defined in a file
      - "traefik.http.services.django_api.loadbalancer.server.url=http://django_api:80"
    hostname: django_api
    depends_on:
      - "db"

  django_frontend:
    build: 
      context: ../
      dockerfile: ./Docker-test/Frontend/Django/Dockerfile
    environment:
      DJANGO_ENVIRONMENT: ${DJANGO_ENVIRONMENT}
      DJANGO_DB_NAME: ${POSTGRES_DB}
      DJANGO_DB_USER: ${POSTGRES_USER}
      DJANGO_DB_PASSWORD: ${POSTGRES_PASSWORD}
      DJANGO_DB_HOST: db  # This is the hostname in docker-compose
      DJANGO_DB_PORT: 5432
    volumes:
      - ../Django_Frontend/:/app
    restart: unless-stopped
    networks:
     - proxy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.django_frontend.rule=Host(`${DOMAIN}`)"
      - "traefik.http.routers.django_frontend.entrypoints=websecure"
      - "traefik.http.routers.django_frontend.tls=true"
      - "traefik.http.routers.django_frontend.middlewares=redirect-to-https@file" # Note the "@file" to specify it's defined in a file
      - "traefik.http.services.django_frontend.loadbalancer.server.url=http://django_frontend:80"
    hostname: django_frontend
    depends_on:
     - "db"
     - "django_api"
  
  traefik:
    build:
      context: ./traefik
      dockerfile: Dockerfile
      args:
        - DOMAIN=${DOMAIN}
    environment:
      DOMAIN: ${DOMAIN}
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
      - "./traefik/traefik.yml:/traefik.yml"
      - "./traefik/dynamic_conf.yml:/dynamic_conf.yml"
      - "certs:/certs"
    networks:
      - proxy
    restart: unless-stopped

volumes:
  certs:
  db:
  pgadmin:

networks:
  proxy: